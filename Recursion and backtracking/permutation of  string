Permutations of a String
Difficulty: MediumAccuracy: 34.65%Submissions: 316K+Points: 4
Given a string s, which may contain duplicate characters, your task is to generate and return an array of all unique permutations of the string. You can return your answer in any order.

Examples:

Input: s = "ABC"
Output: ["ABC", "ACB", "BAC", "BCA", "CAB", "CBA"]
Explanation: Given string ABC has 6 unique permutations.
Input: s = "ABSG"
Output: ["ABGS", "ABSG", "AGBS", "AGSB", "ASBG", "ASGB", "BAGS", "BASG", "BGAS", "BGSA", "BSAG", "BSGA", "GABS", "GASB", "GBAS", "GBSA", "GSAB", "GSBA", "SABG", "SAGB", "SBAG", "SBGA", "SGAB", "SGBA"]
Explanation: Given string ABSG has 24 unique permutations.
Input: s = "AAA"
Output: ["AAA"]
Explanation: No other unique permutations can be formed as all the characters are same.
Constraints:
1 <= s.size() <= 9
s contains only Uppercase english alphabets



class Solution {
    public void getparam(char[] s , int idx ,HashSet<String>as )
    {
        // nase case
        if(idx == s.length)
        {
            // push it into array
            // char array to string
            as.add(new String(s));
            return;
        }
        // loop 
        for(int i = idx; i<s.length; i++)
        {
            // get the value of the string
            // pass the array , index of swap
            swap(s , idx , i); // now for the index we will be swapping
            // call the function for idx+1
            getparam(s , idx+1 , as);
            // backtrack
            swap(s , idx ,i);
        }
    }
    public void swap(char[] s , int idx , int i)
    {
        char temp = s[idx];
        s[idx] = s[i];
        s[i] = temp;
    }
    
    
    
    public ArrayList<String> findPermutation(String s) 
    {
        // Code here
        HashSet<String>as = new HashSet<>();
        // now we will call the getparams
        // and each time we will pass the string to char array and while pushing we will again convert it to string
        getparam(s.toCharArray() , 0 , as); // pass it for the 0 th index and the ans
        
        return new ArrayList<>(as);
        
    }
} 
