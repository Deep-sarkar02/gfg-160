Given an array of integers arr[], the task is to find the first equilibrium point in the array.

The equilibrium point in an array is an index (0-based indexing) such that the sum of all elements before that index is the same as the sum of elements after it. Return -1 if no such point exists. 

Examples:

Input: arr[] = [1, 2, 0, 3]
Output: 2 
Explanation: The sum of left of index 2 is 1 + 2 = 3 and sum on right of index 2 is 3.
Input: arr[] = [1, 1, 1, 1]
Output: -1
Explanation: There is no equilibrium index in the array.
Input: arr[] = [-7, 1, 5, 2, -4, 3, 0]
Output: 3
Explanation: The sum of left of index 3 is -7 + 1 + 5 = -1 and sum on right of index 3 is -4 + 3 + 0 = -1.





class Solution {
    // Function to find equilibrium point in the array.
    public static int findEquilibrium(int arr[]) {
        // code here
        // var will be leftsum , rightsum , totalsum
        int leftsum = 0 , rightsum = 0 ,totalsum = 0;
        // now find the total sum
        for (int i = 0 ; i<arr.length; i++)
        {
            totalsum += arr[i];
        }
        // now the total sum is with us
        // now loop over all the element
        for(int j = 0; j< arr.length ; j++)
        {
            // find the rightsum
            rightsum = (totalsum - leftsum)-arr[j];// since we will consider the left sum so the elem will be exempted
            if(leftsum == rightsum)
            {
                return j; // that index
            }
            // for the else case we will find the leftsum
            leftsum += arr[j] ;
        }
        // if nothing happens then return -1
        return -1;
    }
}
