Given an array arr[] containing integers and an integer k, your task is to find the length of the longest subarray where the sum of its elements is equal to the given value k. If there is no subarray with sum equal to k, return 0.

Examples:

Input: arr[] = [10, 5, 2, 7, 1, -10], k = 15
Output: 6
Explanation: Subarrays with sum = 15 are [5, 2, 7, 1], [10, 5] and [10, 5, 2, 7, 1, -10]. The length of the longest subarray with a sum of 15 is 6.
Input: arr[] = [-5, 8, -14, 2, 4, 12], k = -5
Output: 5
Explanation: Only subarray with sum = -5 is [-5, 8, -14, 2, 4] of length 5.
Input: arr[] = [10, -10, 20, 30], k = 5
Output: 0
Explanation: No subarray with sum = 5 is present in arr[].


class Solution:
    def longestSubarray(self, arr, k):  
        # code here
        map = {}
        sum = 0
        l = 0
        for i in range(len(arr)):
            # find the sum
            sum+=arr[i]
            # now if the sum == k
            if (sum == k):
                # now update the length
                l = max(l , i+1)
            # now if the sum not in map
            if(sum not in map):
                map[sum] = i # include it in the map
            # now check if sum-k is in the map
            if((sum-k) in map):
                # update the lenght
                l = max(l , i-map[sum-k]) # we will take the index of the sum-k from the map and sub tract it from the i
                
        # if nothing found then return 0
        return l


